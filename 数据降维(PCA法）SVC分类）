# 关键字：数据降维(PCA主成分分析法) 。8x8维手写字体-》2维。
# 注意: trainX要fit_transform  testX 只能 transform
# recommend: 数据64维手写数据（8x8），降维至2dim，accuracy：0.47。降维20dim，accuracy:0.94

from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split # 新版本的数据分割调用方法
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import numpy as np




# show by 2D(for test)
def plot_pca_scatter():
    colors = ['black','blue','purple','yellow','white','red','lime','cyan','orange','gray']
    for i in range(len(colors)):
        # 画十个点
        px = np.arange(10)
        py = np.arange(10)
        plt.scatter(px[i],py[i],c=colors[i])
    plt.legend(np.arange(0,10).astype(str))
    plt.show()


# show by 2D(svc)
def plot_scatter(testX,preY,testY,isShowTestPoint=True):
    colors = ['black', 'blue', 'purple', 'yellow', 'white', 'red', 'lime', 'cyan', 'orange', 'gray']

    # img 1
    plt.figure(1)
    plt.title("testX,preY")
    # 先用一个点展开所有颜色,否则会缺颜色
    for i in range(10):
        plt.scatter(1,1,c =colors[i])

    for i in range(testX.shape[0]):
        plt.scatter(testX[i][0],testX[i][1],c = colors[preY[i]])
    plt.legend(np.arange(0, 10).astype(str))

    # img 2
    plt.figure(2)
    plt.title("testX,testY")
    # 先用一个点展开所有颜色,否则会缺颜色
    for i in range(10):
        plt.scatter(1, 1, c=colors[i])
    for i in  range(testX.shape[0]):
        plt.scatter(testX[i][0],testX[i][1],c = colors[testY[i]])
    plt.legend(np.arange(0, 10).astype(str))

    plt.show()

def getTrainData():
    # return trainX,testX,trainY,testY
    digits = load_digits()
    trainX,testX,trainY,testY = train_test_split(digits.data,digits.target,test_size=0.25,random_state=33)
    return trainX,testX,trainY,testY


def test1():
    # 8x8维 降维 成 2维,由SVC 获得分类结果
    trainX,testX,trainY,testY = getTrainData()

    # reduce dim
    n_compon = 2
    estimator = PCA(n_components=n_compon) # 降维至 n_components
    trainX = estimator.fit_transform(trainX)
    testX = estimator.transform(testX) # testX

    # fit with 2dim digits by SVClinear
    svc = LinearSVC()
    svc.fit(trainX,trainY)
    preY = svc.predict(testX)
    print("PCA to dim = ",n_compon,"\nscore:",svc.score(testX,testY))

    # show 2d
    plot_scatter(testX,preY,testY,isShowTestPoint = True)

def test2():
    # 8x8维 fit
    # get data
    trainX,testX,trainY,testY = getTrainData()

    # regular
    ss = StandardScaler()
    trainX = ss.fit_transform(trainX)
    testX = ss.transform(testX)

    # fit
    lsvc2 = LinearSVC()
    lsvc2.fit(trainX,trainY)
    print(lsvc2.score(testX,testY))

# main
test1()


